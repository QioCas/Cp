#!/usr/bin/python3

import os
import subprocess
import argparse

# ===== CONFIG =====
WORKSPACE = "/home/qiocas/Cp/"
STRESS = os.path.join(WORKSPACE, "Stress/")

parser = argparse.ArgumentParser(
                    prog='check',
                    description='Local test',
                    epilog='')

parser.add_argument('-c', '--checker', action='store_true', help='Enable checker')

args = parser.parse_args()

# ===== Helper functions =====
def run(cmd, **kwargs):
    print(f"\033[35m[EXECUTE]\033[0m {' '.join(cmd)}")
    return subprocess.run(cmd, **kwargs)

def compile_cpp(name):
    src = os.path.join(STRESS, f"{name}.cpp")
    out = os.path.join(STRESS, name)
    if not os.path.exists(src):
        raise FileNotFoundError(src)
    run(["compile", src], check=True)

# ===== Main =====
def main():
    os.chdir(STRESS)

    # Compile programs
    compile_cpp("main")
    compile_cpp("brute")
    if args.checker:
        compile_cpp("checker")

    with open("test.in", "r") as fin, open("test.ans", "w") as fout:
        run(["./brute"], stdin=fin, stdout=fout, check=True)

    with open("test.in", "r") as fin, open("test.out", "w") as fout:
        run(["./main"], stdin=fin, stdout=fout, check=True)

    if not args.checker:
        diff = subprocess.run(["diff", "-Z", "test.out", "test.ans"])
        if diff.returncode != 0:
            print("\033[31m[ERROR]\033[0m WA on the following test:")
            print(open("test.in").read())
            print("==================\nYour answer is:")
            print(open("test.out").read())
            print("==================\nCorrect answer is:")
            print(open("test.ans").read())
            exit()
    else:
        res = run(["./checker"])
        if res.returncode != 0:
            print("WA on the following test:")
            print(open("test.in").read())
            print("==================\nYour answer is:")
            print(open("test.out").read())
            print("==================\nCorrect answer is:")
            print(open("test.ans").read())
            exit()
    print(f"\033[32m[OK]\033[0m Passed test.")

    # Cleanup
    for name in ["main", "brute", "gen", "checker"]:
        exe = os.path.join(STRESS, name)
        if os.path.exists(exe):
            os.remove(exe)

if __name__ == "__main__":
    main()
